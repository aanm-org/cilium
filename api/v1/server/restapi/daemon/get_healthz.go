// Code generated by go-swagger; DO NOT EDIT.


// Copyright Authors of Cilium
// SPDX-License-Identifier: Apache-2.0


package daemon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
  "net/http"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime/middleware"
  "github.com/go-openapi/runtime/security"
  "github.com/go-openapi/strfmt"
  "github.com/go-openapi/swag"
  "github.com/go-openapi/validate"

  	"github.com/cilium/cilium/api/v1/models"
	"github.com/cilium/cilium/api/v1/server/restapi/bgp"
	"github.com/cilium/cilium/api/v1/server/restapi/daemon"
	"github.com/cilium/cilium/api/v1/server/restapi/endpoint"
	"github.com/cilium/cilium/api/v1/server/restapi/ipam"
	"github.com/cilium/cilium/api/v1/server/restapi/policy"
	"github.com/cilium/cilium/api/v1/server/restapi/prefilter"
	"github.com/cilium/cilium/api/v1/server/restapi/recorder"
	"github.com/cilium/cilium/api/v1/server/restapi/service"
  	"github.com/cilium/cilium/api/v1/server/restapi"
)

// GetHealthzHandlerFunc turns a function with the right signature into a get healthz handler
type GetHealthzHandlerFunc func(GetHealthzParams)  middleware.Responder 

// Handle executing the request and returning a response
func (fn GetHealthzHandlerFunc) Handle(params GetHealthzParams)  middleware.Responder  {
  return fn(params)
}

// GetHealthzHandler interface for that can handle valid get healthz params
type GetHealthzHandler interface {
  Handle(GetHealthzParams)  middleware.Responder 
}

// NewGetHealthz creates a new http.Handler for the get healthz operation
func NewGetHealthz(ctx *middleware.Context, handler GetHealthzHandler) *GetHealthz {
  return &GetHealthz{Context: ctx, Handler: handler}
}

/* GetHealthz swagger:route GET /healthz daemon getHealthz

Get health of Cilium daemon

Returns health and status information of the Cilium daemon and related
components such as the local container runtime, connected datastore,
Kubernetes integration and Hubble.


*/
type GetHealthz struct {
  Context *middleware.Context
  Handler GetHealthzHandler
}

func (o *GetHealthz) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
  route, rCtx, _ := o.Context.RouteInfo(r)
  if rCtx != nil {
    *r = *rCtx
  }
  var Params = NewGetHealthzParams()
  if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
    o.Context.Respond(rw, r, route.Produces, route, err)
    return
  }

  res := o.Handler.Handle(Params) // actually handle the request
  o.Context.Respond(rw, r, route.Produces, route, res)

}


